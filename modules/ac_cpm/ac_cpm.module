<?php

define('AC_CPM_CHECKOUT_PREFIX', 'ac_cpm_duplicates_');

/**
 * Implements hook_menu().
 */
function ac_cpm_menu() {
  $items = array();

  $items['admin/commerce/config/checkout/multiplier'] = array(
    'title' => 'Checkout pane multiplier',
    'description' => 'Enables you to clone panes and set their position in checkout workflow. (currently pane multiplying(cloning) works for viewing the pane only)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ac_cpm_multipier_settings_form'),
    'access arguments' => array('administer checkout'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20, // lets make it last tab in checkout UI.
    'file' => 'includes/ac_cpm.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function ac_cpm_commerce_checkout_pane_info() {
  $checkout_panes = array();

  foreach (get_ac_cpm_checkout_pane_settings() as $key => $duplicates) {
    // We do not check if it is 0 or less than 0... We need to duplicate it when it is more than 1.
    if ($duplicates > 1) {
      $checkout_panes += ac_cpm_make_duplicates($key, $duplicates);
    }
  }

  return $checkout_panes;
}

/**
 * Implements hook_module_implements_alter().
 */
function ac_cpm_module_implements_alter(&$implementations, $hook) {

  // Even if we have the lowest weight in the system dir. 
  // Making shure that your mod is the last on a very special/important hook.
  if ($hook == 'commerce_checkout_pane_info') {
    $module = 'ac_cpm';
    $group = $implementations[$module];
    unset($implementations[$module]);
    $implementations[$module] = $group;
  }
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 * @param array $checkout_panes
 */
function ac_cpm_commerce_checkout_pane_info_alter(&$checkout_panes) {
  // The idea of this override is related with callback function that should be implemented before called.
  // And if duplicate pane is in the different page than the original - it contains. ac_cpm module as initiator
  // And then it does not find callback of an original module.
  // Original module is overriden by commerce_checkout.module line 537.
  foreach ($checkout_panes as $pane_id => $pane) {
    if (isset($pane['original_module'])) {
      // We override module with presaved original module.
      $checkout_panes[$pane_id]['module'] = $pane['original_module'];
    }
  }
}

/**
 *
 * @param string $title
 * @param int $duplicates
 * @return array
 */
function ac_cpm_make_duplicates($title, $multiply_number) {
  $duplicates = array();

  // While we are the last hook - some of panes will be saved till now so we can take them.
  $available_checkout_pane = commerce_checkout_panes();
  $pane_id = substr($title, strlen(AC_CPM_CHECKOUT_PREFIX));

  for ($i = 1; $i < $multiply_number; $i++) {
    if (isset($available_checkout_pane[$pane_id])) {
      $pane = $available_checkout_pane[$pane_id];
      $key = AC_CPM_CHECKOUT_PREFIX . $pane_id . $i;
      $duplicates[$key] = $pane;
      $duplicates[$key]['pane_id'] = $key;

      // Save our pane imidiatelly if it was not saved.
      if (!_ac_cpm_is_saved($key) && isset($pane['saved']) && $pane['saved']) {
        commerce_checkout_pane_save($duplicates[$key]);
      }

      unset($duplicates[$key]['weight']);
      unset($duplicates[$key]['page']);
      unset($duplicates[$key]['review']);
      unset($duplicates[$key]['collapsible']);
      unset($duplicates[$key]['collapsed']);
      unset($duplicates[$key]['enabled']);
      $duplicates[$key]['original_module'] = $pane['module'];
    } else {
      // Looks like the pane does not exists anymore.
      return array();
    }
  }

  return $duplicates;
}

/**
 * Selects from variables with given prefix.
 * @todo move to global tools
 * @global array $conf
 * @param string $prefix
 * @return array
 */
function _ac_cpm_variable_select($prefix) {
  $found = array();

  global $conf;
  foreach ($conf as $key => $value) {
    if (strpos($key, $prefix) === 0) {
      $found[$key] = $value;
    }
  }

  return empty($found) ? null : $found;
}

/**
 * Trims those
 * @param array $panes
 */
function _ac_cpm_trim_singles(&$panes) {
  if (!empty($panes)) {
    foreach ($panes as $key => $value) {
      if ($value == 1) {
        unset($panes[$key]);
      }
    }
  }
}

/**
 * @return array
 */
function get_ac_cpm_checkout_pane_settings() {
  // Take from variables using our prefix.
  $checkout_pane_settings = _ac_cpm_variable_select(AC_CPM_CHECKOUT_PREFIX);
  if (empty($checkout_pane_settings)) {
    return array();
  }
  _ac_cpm_trim_singles($checkout_pane_settings);
  return $checkout_pane_settings;
}

/**
 * Function to check if the given pane is saved to "commerce_checkout_pane" tabel.
 * @param string $pane_id
 * @return boolean
 */
function _ac_cpm_is_saved($pane_id) {
  $saved_panes = db_query('SELECT * FROM {commerce_checkout_pane}')->fetchAllAssoc('pane_id', PDO::FETCH_ASSOC);
  if (isset($saved_panes[$pane_id])) {
    return true;
  }

  return false;
}
