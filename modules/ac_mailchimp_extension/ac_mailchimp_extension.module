<?php

/**
 * @file ac_mailchimp_extension.module
 * Code to implement module functionallity.
 */

/**
 * Implements hook_commerce_checkout_pane_info()
 */
function ac_mailchimp_extension_commerce_checkout_pane_info() {
  $panes = array();

  $panes['adapt_commerce_mailchimp_extension'] = array(
    'title' => t(variable_get('ac_mailchimp_extension_panel_title', 'Subscribe to be updated?')),
    'base' => 'ac_mailchimp_extension',
    'page' => 'review',
    'file' => 'includes/mailchimp_extension.checkout_pane.inc',
  );

  return $panes;
}

/**
 * Implements hook_form_alter().
 */
function ac_mailchimp_extension_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['continue']['#submit'][] = 'ac_mailchimp_extension_subscribtion_submit';
}

/**
 * Custom submit handler for newsletter signup checkbox.
 * Checks if user is already subscribed and if not, adds his/her email to given email lists.
 */
function ac_mailchimp_extension_subscribtion_submit($form, &$form_state) {
  $subscriptions = $form_state['values']['adapt_commerce_mailchimp_extension']['ac_mailchimp_extension_list'];

  // If none is chosen, skip subscribtion.
  if (empty($subscriptions)) {
    return;
  }

  $selected = false;
  // if we have zero subscriptions selected, skip.
  foreach ($subscriptions as $value) {
    if ($value == 1) {
      $selected = true;
      break;
    }
  }

  if (!$selected) {
    return;
  }

  // Load order and wrap it as entity.
  $order = $form_state['order'];
  $ow = entity_metadata_wrapper('commerce_order', $order);
  // Create cache id for order.
  $subscribtion_cache_id = 'ac_mailchimp_extension_subscribtion_order' . $ow->order_number->value();
  // get cache data for order.
  $subscribtion_cache = cache_get($subscribtion_cache_id, 'cache');

  // If there is no cache data returned start subscribtion.
  if (!$subscribtion_cache) {
    // Set user email value for subscribtion and checks.
    $email = $ow->mail->value();
    $vars = array(
      'FNAME' => $ow->commerce_customer_billing->commerce_customer_address->name_line->value(),
      'EMAIL' => $email,
    );
    // Get all lists.
    $lists = mailchimp_get_lists();
    // If there are no lists defined, stop subscribtion.
    if (empty($lists)) {
      return;
    }
    // Proceed subscriptions.
    foreach ($subscriptions as $key => $value) {
      if ($value == 1 && !mailchimp_is_subscribed($key, $email)) {
        // If email is not in subscribtion list - subscribe.
        mailchimp_subscribe($list['id'], $email, $mergevars);
      }
    }

    // Set cache value after subscribtion is done, if payment server is not responding and
    // checkout form tries to reconnect multiple times to prevent multiple
    // subscribtion requests with same data to MailChimp.
    cache_set($subscribtion_cache_id, TRUE, 'cache', time() + 60 * 60);
  }
}
